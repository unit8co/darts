name: darts release workflow

on:
  workflow_dispatch:
    inputs:
        bump_type:
          description: "Bump type (#major, #minor, #patch)"
          required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: "1. Clone repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_WORKFLOW_TOKEN_NEW_FINE_GRAINED }}
          fetch-depth: '1'

      - name: "2. Set up Python 3.10"
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: "Setup Pip"
        run: |
          python -m pip install --upgrade pip

      - name: "Install release dependencies"
        run: |
          pip install -q -r requirements/release.txt

      - name: "Determine next version"
        uses: hrzn/github-tag-action@master
        id: bump_dry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: true
          BUMP_TYPE: ${{ github.event.inputs.bump_type}}

      - name: "Bump version"
        run: |
          bump2version --new-version ${{ steps.bump_dry.outputs.new_tag }} patch

      - name: "Commit new version"
        uses: stefanzweifel/git-auto-commit-action@v4.1.6
        with:
          commit_message: Release ${{ steps.bump_dry.outputs.new_tag }}
          branch: master
          push_options: --force
          commit_user_name: Unit8 Bot
          commit_user_email: info@unit8.co

      - name: "Publish new tag"
        uses: hrzn/github-tag-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG: ${{steps.bump_dry.outputs.new_tag}}

      - name: "10. Create new release"
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_dry.outputs.new_tag }}
          release_name: Darts ${{steps.bump_dry.outputs.part}} ${{ steps.bump_dry.outputs.new_tag }}
          draft: false
          body_path: .github/RELEASE_TEMPLATE/release_body.md

  deploy-docker:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: "1. Clone repository"
        uses: actions/checkout@v4

      - name: "2. Determine current version"
        uses: hrzn/github-tag-action@master
        id: bump_dry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: true
          BUMP_TYPE: ${{ github.event.inputs.bump_type}}

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: "Build and push"
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: unit8/darts:${{ steps.bump_dry.outputs.tag }}, unit8/darts:latest

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: "Clone repository"
        uses: actions/checkout@v4

      - name: "Set up Python 3.10"
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # use `uv` to retrieve the latest dependency versions
      - name: "Compile Dependency Versions"
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv pip compile requirements/dev-all.txt > requirements-latest.txt

      # only restore cache but do not upload
      - name: "Restore cached python environment"
        uses: actions/cache/restore@v4
        id: pythonenv-cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/*.txt', 'requirements-latest.txt') }}

      - name: "Install pandoc"
        run: |
          sudo apt-get install -y pandoc

      - name: "Setup Pip"
        run: |
          python -m pip install --upgrade pip

      - name: "Install Dependencies"
        run: |
          # install latest dependencies (potentially updating cached dependencies)
          pip install -U -r requirements/dev-all.txt

      - name: "Install libomp (for LightGBM)"
        run: |
          ./.github/scripts/libomp-${{ runner.os }}.sh

      - name: "Install Locally"
        run: |
          pip install .

      - name: "Build docs"
        run: |
          make --directory ./docs build-all-docs

      - name: "Publish documentation to gh-pages"
        uses: s0/git-publish-subdir-action@v2.2.0
        env:
          REPO: self
          BRANCH: gh-pages
          FOLDER: docs/build/html
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
